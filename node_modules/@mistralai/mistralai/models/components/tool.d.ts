import { OpenEnum } from "../../types/enums.js";
import { FunctionT, FunctionT$Outbound } from "./function.js";
import * as z from "zod";
export declare const ToolToolTypes: {
    readonly Function: "function";
};
export type ToolToolTypes = OpenEnum<typeof ToolToolTypes>;
export type Tool = {
    type?: ToolToolTypes | undefined;
    function: FunctionT;
};
/** @internal */
export declare const ToolToolTypes$inboundSchema: z.ZodType<ToolToolTypes, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ToolToolTypes$outboundSchema: z.ZodType<ToolToolTypes, z.ZodTypeDef, ToolToolTypes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ToolToolTypes$ {
    /** @deprecated use `ToolToolTypes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolToolTypes, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolToolTypes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolToolTypes, z.ZodTypeDef, ToolToolTypes>;
}
/** @internal */
export declare const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown>;
/** @internal */
export type Tool$Outbound = {
    type: string;
    function: FunctionT$Outbound;
};
/** @internal */
export declare const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Tool$ {
    /** @deprecated use `Tool$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown>;
    /** @deprecated use `Tool$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool>;
    /** @deprecated use `Tool$Outbound` instead. */
    type Outbound = Tool$Outbound;
}
//# sourceMappingURL=tool.d.ts.map